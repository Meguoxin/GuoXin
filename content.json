{"meta":{"title":"WordGuo","subtitle":null,"description":"成全别人，恶心自己","author":"郭三金","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-10-14T13:32:01.020Z","updated":"2017-10-14T13:32:01.020Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":"layout: 404title: “[404]”description: “May the Force be with you :&#41;”"},{"title":"","date":"2017-10-16T07:15:41.400Z","updated":"2017-10-16T07:15:41.400Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"关于我来自山西运城，专注从事Android行业，感性做人，理性做事关注WeiBo"},{"title":"categories","date":"2017-10-15T11:00:06.000Z","updated":"2017-10-15T12:13:35.656Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-15T10:58:14.000Z","updated":"2017-10-15T12:11:16.455Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"AsyncTask源码解读","slug":"java-GC","date":"2017-10-17T10:26:00.000Z","updated":"2017-10-17T11:33:39.616Z","comments":true,"path":"2017/10/17/java-GC/","link":"","permalink":"http://yoursite.com/2017/10/17/java-GC/","excerpt":"关于Asnynck有很多的源码解读，但一些解读现在看来已经不在适用了，比如AsyncTask类必须在UI Thread当中加载，AsyncTask的对象必须在UI Thread当中实例化等一些结论都是基于以前版本的代码来解读的，现在看来已经不是这样的了。同时分析了在AsyncTask的使用中存在的以及以及应该注意的问题，基于一些实际存在的问题尤其是并行串行问题，写了一个类似AsyncTask的库AsyncTaskScheduler，处理了上述的一些实际存在的问题。转载自@SilenceDut 的博客","text":"关于Asnynck有很多的源码解读，但一些解读现在看来已经不在适用了，比如AsyncTask类必须在UI Thread当中加载，AsyncTask的对象必须在UI Thread当中实例化等一些结论都是基于以前版本的代码来解读的，现在看来已经不是这样的了。同时分析了在AsyncTask的使用中存在的以及以及应该注意的问题，基于一些实际存在的问题尤其是并行串行问题，写了一个类似AsyncTask的库AsyncTaskScheduler，处理了上述的一些实际存在的问题。转载自@SilenceDut 的博客 AsyncTask源码解读一些结论解读（基于android-23源码）：1. API 16 以前必须在主线程加载 AsyncTask，API 16 以后就不用了。123456private static class InternalHandler extends Handler &#123; public InternalHandler() &#123; super(Looper.getMainLooper()); &#125; ...&#125;因为AsyncTask主要目的是在后台执行异步任务，然后和UI线程进行交互，所以需要得到UI线程的Handler，之前的AsyncTask加载时，是得到当前加载线程的Handler，而最新的源码中，总是得到UI线程的Looper来创建和UI交互的Handler 2.因为每个AsyncTask只能执行一次，多次调用同一个AsyncTask对象会出现异常。但如果要处理多个后台任务，你需要创建多个AsyncTask并执行execute()。AsyncTask有三种状态，就绪PENDING，运行RUNNING,结束FINISHED,只有PENDING(就绪状态)的可以正确执行,执行后将状态置为Running,可知，每个AsyncTask只能执行一次，所有要想执行多个异步任务，只能新建多个AsyncTask对象。 3. API 4-11 默认是AsnckTask任务并发执行，API11后默认是顺序执行，任务是顺序执行，必须等一个任务结束才能执行下一个。但是可以通过executeOnExecutor（AsyncTask.THREAD_POOL_EXECUTOR）来进行并行执行任务，在并行执行任务时，有最大执行个数的限制THREAD_POOL _EXECUTOR是默认的并行执行任务的线程池，BlockingQueue队列的长度是128。以自己的8核手机为例，其核心线程数是9个，最大线程是17，所能最大加入的任务数是128+17=145，如果超出这个任务数，就会报出RejectExecutionException异常（经过测试）。 4.AsyncTask需要在UI线程调用execute()函数调用execute()函数时调用了onPreExecute()，而onPreExecute()需要在UI线程中执行，所以AsyncTask需要在UI线程调用execute()函数 。（但是如果你不适用onPreExecute在主线程做一些操作的话，execute()可以在任意线程调用） AsyncTask执行任务的过程原理提取核心部分，简化后的代码：1234567891011121314151617mWorker = new WorkerRunnable&lt;Params, Result&gt;() &#123; public Result call() throws Exception &#123; Result result = doInBackground(mParams); Binder.flushPendingCommands(); return postResult(result); &#125;&#125;;mFuture = new FutureTask&lt;Result&gt;(mWorker) &#123; @Override protected void done() &#123; postResultIfNotInvoked(get()); &#125;&#125;; AsyncTask的任务执行原理是新建一个有返回值的任务线程FuntureTask和一个Callabler任务WorkerRunnable，在任务中从doInBackground得到的结果Result通过Handler进行处理，调用onProgress和onPostResult(Result result)关于Future FutureTask Callable的使用 AsyncTask的黑暗面如果搜索关键词”AsyncTask的缺陷”，会有很多关于AsyncTask缺陷的文章，很多是基于以下几个问题，但这些问题真的是AsyncTask自身的问题还是使用不当导致的呢?这真的需要好好分析一下，不能人云亦云，强行甩锅。 使用不当带来的问题 1. 生命周期和内存泄漏“当Activity结束或者退出应用时AsyncTask会一直执行doInBackground()方法直到方法执行结束，这可能会导致在onPostExecute时view不存在而导致崩溃溃，以及可能的内存泄露”。如果退出Activity时AsyncTask扔在执行，上面说的的却会发生，但这些问题需要由使用者来解决而不是AsyncTask来解决，因为AsyncTask只是执行后台任务，它怎么知道你什么时候要终止，要退出，确定使用Handler时不会出现这样问题？？？ 2. cancel不能正常取消的问题首先调用cancel终止AsyncTask的原理是对执行异步任务的线程调用interrupt()函数。每个线程内部都有一个boolean型变量表示线程的中断状态，true代表线程处于中断状态，false表示未处于中断状态。而interrupt()方法的作用只是用来改变线程的中断状态(把线程的中断状态改为true,即被中断)。Thread.interrupt()只在Object.wait() .Object.join(), Object.sleep()几个方法会主动抛出InterruptedException异常，从而结束阻塞状态。而在其他的时候，只是通过设置了Thread的一个标志位信息，需要程序自我进行处理。 所以如果你的AsyncTask后台任务有未做中断的处理肯定会一直执行这个线程。所以这需要你自己在doInbackground里进行中断处理，即使你认为这是个缺陷也应该是Thread类的缺陷，因为要用到线程处理异步任务，AsyncTask无法选择其他方式，而且调用cancel后onPostExecute也不会在执行了，不会导致UI线程的问题，所以这个锅也不应该AsyncTask来背。 3. Activity意外重启，状态消失问题比如当用户旋转屏幕的时候Activity就会重新启动，如果之前有AsyncTask正在异步加载处理数据，那么之前的数据就会消失，而新的AsyncTask重新创建，这的却是个问题，但你用其他的方式进行请求同样会发生这个问题啊。 其实可能是我们的要求太多了，AsyncTask只是一个处理异步任务的工具，很多逻辑上的东西需要我们自己来处理，就像使用Handler和Thread，不正确处理同样会出现上述问题，这些总得来说就是异步带来的问题，这是一个时间和性能的选择问题，AsyncTask就是简化了包装了Handler的处理步骤而已。上面的这些更应该是一些重要的注意事项，而不是AsyncTask的问题 实际存在的问题 1. 并行串行问题上面的一些可能是由于使用不当导致的，但并行串行问题方面AsyncTask问题很大。看AsyncTask源码文档时看到这样建议”AsyncTasks should ideally be used for short operations (a few seconds at the most”，就是尽量执行一个短时间的任务，最对也就几秒的任务。当初还很疑惑，AsyncTask这玩意不就是用来处理后台任务的吗，又不是在主线程，为什么还限制短时间的任务，那要你何用啊。上面分析过在api11后AsyncTask默认的是串行执行任务，基本现上市面上的设备上都将是串行执行。自己可以写个Demo试试看。 这些串行执行共用的AsyncTask的是一个线程池，这真的很严重。因为是顺序执行，导致你调用execute() 可能 没法立刻执行，也可能就执行不了，因为谁知道有没有其他的AsyncTask任务在执行啊，或者任务还是个很耗时的任务，或者就是个while(ture)循环或者for(;;)来一直处理一种后台任务，那么同一进程内的AsyncTask在这之后调用execute的都将无法执行。 想当初初学Android时觉得AsyncTask真是个方便的东西，手机写了个基于socket通信的应用，doInbackground处理，然后直接通知UI。在doInbackground函数里处理一些连接以及数据流的接收及发送，socket的等待连接和数据结束都是阻塞的啊，现在回想起来当初真是年轻😃。 当然你可以立刻执行一个任务通过调用executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)通过AsyncTask的THREAD_POOL_EXECUTOR线程池或者传入其他的线程池来立刻执行任务，但THREAD_POOL_EXECUTOR有最大并发数的限制，但只执行一个任务时通过线程池来管理的也是无奈之举，而且这种方式不是默认方案啊，不容易发现啊。 2. 错误处理问题AsyncTask没有对发生的一些异常进行处理，你只能在onBackground里进行一些判断，但之外的一些异常情况发生你都无法了解，比如线程异常退出等。 3. 多个任务的管理问题如果需要多个后台任务，需要新建多个AsyncTask来执行任务，在需要退出的时候你需要对每一个都进行一定的处理来避免内存泄露以及UI问题，这是一个很麻烦的事情。 如果你使用AsyncTask默认的执行方式，出了问题都很难排查。你可以保证你能正确使用AsyncTask，但你没法保证别人也能正确使用啊，这就是别人给你挖的坑，但是你跳了进去啊，关键你可能都不知道到底哪个AsyncTask在执行，可能引用就发生在第三方库的也有可能啊。 替代方案基于上述实际存在的问题尤其是并行串行问题，写了一个类似AsyncTask的库AsyncTaskScheduler，处理了上述的一些实际存在的问题。 特点 默认多个任务并行处理。 执行单个任务无需使用线程池。 支持自定义线程池。 支持错误处。 多个任务的管理管理方便。 支持任何线程处使用，结果都会在UI线程处理。 方法介绍 doInBackground onProgressUpdate onExecuteSucceed onExecuteCancelled onExecuteFailed。 使用1.单个任务——是在单个线程里执行，不需要线程池。123456789101112131415161718SingleAsyncTask singleTask = new SingleAsyncTask&lt;Void,String&gt;() &#123; @Override public String doInBackground() &#123; return null; &#125; @Override public void onExecuteSucceed(String result) &#123; super.onExecuteSucceed(result); &#125; @Override public void onExecuteFailed(Exception exception) &#123; super.onExecuteFailed(exception); Log.i(TAG,\"onExecuteCancelled:\"+exception.getMessage()+Thread.currentThread()); &#125;&#125;;singleTask.executeSingle();//取消通过executeSingle执行的任务 mSingleAsyncTask.cancel(true); 2.多个任务1234567891011121314//多个任务新建一个任务调度器AsyncTaskScheduler mAsyncTaskScheduler = new AsyncTaskScheduler();SingleAsyncTask singleTask1 = new SingleTask() &#123; ... &#125;；SingleAsyncTask singleTask2 = new SingleTask() &#123; ... &#125;；SingleAsyncTask singleTask3 = new SingleTask() &#123; ... &#125;；...//并行执行多个任务mAsyncTaskScheduler.execute(singleTask1).execute(singleTask2).execute(singleTask3).//设置默认的线程池Executor defaultPoolExecutor = ...AsyncTaskScheduler mAsyncTaskScheduler = new AsyncTaskScheduler(Executor defaultPoolExecutor); //取消通过AsyncTaskScheduler任务mAsyncTaskScheduler.cancelAllTasks(true); 3.确保正确的取消任务以防止避免内存泄露或其他问题","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}],"tags":[{"name":"Android sound code","slug":"Android-sound-code","permalink":"http://yoursite.com/tags/Android-sound-code/"}]},{"title":"JAVA 的各种集合的线线程","slug":"Java-Thread","date":"2017-10-16T13:15:56.000Z","updated":"2017-10-17T10:25:23.769Z","comments":true,"path":"2017/10/16/Java-Thread/","link":"","permalink":"http://yoursite.com/2017/10/16/Java-Thread/","excerpt":"一. 线程安全首先要明白线程的工作原理，jvm有一个main memory，而每个线程有自己的working memory一个线程对一个variable进行操作时，都要在自己的workingmemory里面建立一个copy，操作完之后再写入mainmemory。","text":"一. 线程安全首先要明白线程的工作原理，jvm有一个main memory，而每个线程有自己的working memory一个线程对一个variable进行操作时，都要在自己的workingmemory里面建立一个copy，操作完之后再写入mainmemory。多个线程同时操作同一个variable，就可能会出现不可预知的结果。根据上面的解释，很容易想出相应的scenario。而用synchronized的关键是建立一个monitor，这个monitor可以是要修改的variable也可以其他你认为合适的object比如method，然后通过给这个monitor加锁来实现线程安全，每个线程在获得这个锁之后，要执行完load到workingmemory －&gt; use&amp;assign －&gt; store到mainmemory的过程，才会释放它得到的锁。这样就实现了所谓的线程安全。什么是线程安全?线程安全是怎么完成的(原理)? 线程安全就是说多线程访问同一代码，不会产生不确定的结果。编写线程安全的代码是低依靠线程同步。 二. JAVA 相关的集合Vector、ArrayList、LinkedListVector和ArrayList在使用上非常相似,都可用来表示一组数量可变的对象应用的集合,并且可以随机地访问其中的元素。Vector的方法都是同步的(Synchronized),是线程安全的(thread-safe)，而ArrayList的方法不是，由于线程的同步必然要影响性能，因此,ArrayList的性能比Vector好。 ArrayList和LinkedList区别 对于处理一列数据项,Java提供了两个类ArrayList和LinkedList,ArrayList的内部实现是基于内部数组Object[],所以从概念上讲,它更象数组，但LinkedList的内部实现是基于一组连接的记录,所以,它更象一个链表结构，所以,它们在性能上有很大的差别。从上面的分析可知,在ArrayList的前面或中间插入数据时,你必须将其后的所有数据相应的后移,这样必然要花费较多时间，所以,当你的操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用ArrayList会提供比较好的性能而访问链表中的某个元素时,就必须从链表的一端开始沿着连接方向一个一个元素地去查找,直到找到所需的元素为止，所以,当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用LinkedList了。如果在编程中,1，2两种情形交替出现,这时,你可以考虑使用List这样的通用接口,而不用关心具体的实现，在具体的情形下,它的性能由具体的实现来保证。 TreeSet,TreeMapTreeSet： 1、TreeSet基于TreeMap实现，支持排序。 2、TreeSet是非线程安全的。从对HashSet和TreeSet的描述来看，TreeSet和HashSet一样，也是完全基于Map来实现的，并且都不支持get(int)来获取指定位置的元素（需要遍历获取），另外TreeSet还提供了一些排序方面的支持。例如传入Comparator实现、descendingSet以及descendingIterator等。 TreeMap：1、TreeMap是一个典型的基于红黑树的Map实现，因此它要求一定要有Key比较的方法，要么传入Comparator实现，要么key对象实现Comparable接口。2、TreeMap是非线程安全的。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java-Thread-theory","slug":"Java-Thread-theory","permalink":"http://yoursite.com/tags/Java-Thread-theory/"}]},{"title":"Android面试一天一题","slug":"Android-interview","date":"2017-10-16T10:02:59.000Z","updated":"2017-10-16T12:12:51.331Z","comments":true,"path":"2017/10/16/Android-interview/","link":"","permalink":"http://yoursite.com/2017/10/16/Android-interview/","excerpt":"Android 面试启示录Day1知道Service吗，它有几种启动方式？","text":"Android 面试启示录Day1知道Service吗，它有几种启动方式？Day2用广播来更新UI界面好吗？Day3怎么理解Activity的生命周期？Day4如何判断Activity是否在运行？Day5自定义View的状态是如何保存的？Day6通过new创建的View实例它的onSaveStateInstance会被调用吗？Day7Java的值传递和引用传递问题Day8能讲讲Android的Handler机制吗？Day9两个Activity之间如何传递参数？Day10如何理解Android中的Context，它有什么用？Day11如何优化ListView的性能？Day12如何实现应用内多语言切换？Day13在项目中使用AsyncTask会有什么问题吗？Day14修改SharedPreferences后两种提交方式有什么区别？Day15有使用过ContentProvider码？能说说Android为什么要设计ContentProvider这个组件吗？Day16如何处理线程同步的问题？吹牛题Day17做一个完整的项目，提交到github。如何准备自我介绍Day18如何对SQLite数据库中进行大量的数据插入？Day 19程序员何苦为难程序员（上）如何与HR谈薪资Day 20程序员何苦为难程序员（下）Day21res目录一细节处见真章Day22图片到底是什么Day23当Android遇上JavaScriptDay24悲催的FragmentDay25进程和线程Day26ScrollView嵌套ListView的事件冲突Day27ART&amp;DalvikDay28内存泥潭（上）Day29内存泥潭（下）Day30老外自定义View面试题Day31Android技术难题解决方案Day32谈谈使用过的第三方开源库Day33Android开发的套路MVP&amp;MVVMDay34常用的Android相关站点Day35神秘的Binder机制Day36AIDLDay37一套高级工程师的面试题Day38如何设计一个照片上传AppDay39写博客重要嘛？Day40标配Rxjava+Retrofit+OkHttp该怎么面？Day41一波面试官准备Kotlin面试题Day42关于Android布局你不知道的Day43设计模式Day44实战美团-java内存模型Day45实战锤子科技-线程引发的问题 准备工作Android 名企面试题及涉及知识点整理。","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}],"tags":[{"name":"Android Interview","slug":"Android-Interview","permalink":"http://yoursite.com/tags/Android-Interview/"}]},{"title":"曾经打架的兄弟，现在和我不再联系","slug":"feeling","date":"2017-10-16T05:08:32.000Z","updated":"2017-10-16T12:19:08.146Z","comments":true,"path":"2017/10/16/feeling/","link":"","permalink":"http://yoursite.com/2017/10/16/feeling/","excerpt":"","text":"第01节强哥是我最铁的兄弟，现在在德州开了几家扒鸡店。 前段时间，强哥给我打电话说：“老三，我下周四结婚，你得来当伴郎。” 那段时间我正处于低谷期。稿子写的不够好，业务上也被同事碾压，不敢放松一分一秒，也不好意思请假。 我对着电话支支吾吾地说，强哥我可能去不了。后来强哥说，孙涛从美国都飞回来了，咱们兄弟3个好久不见了，你能试着请假吗？我打开电脑看了一下文章的排期表，周三那天正好排的是我的稿子。我想了想还是说，工作这边太忙不能去。然后我忙补充一句，强哥，我就不去了，礼金我让他们捎过去。他语气一下就变了，声音忽然变得很低：“我又不是为了要你的钱，他在美国读书，你在北京工作，我们三兄弟好久没聚齐过了。” 后来我也没去。我安慰自己，都是兄弟，他可以担待的。第02节结婚以后第四个月强哥带着媳妇来北京旅游，给我打电话说来北京玩上3天。强哥说好久不见我了，想喊着我一块吃个饭，还带了一点东西给我。我说没问题，你们两口子来北京了，我怎么都得好好招呼招呼你们。强哥来的那天是星期四，那天我们公号要定月度计划，到家的时候差不多是凌晨3点了。我躺在床上想让他们两口子这两天好好玩玩，第三天周六的时候我再去找他们。周五下午，本来之前订好去参加的一个新媒体交流活动的主办方给我们打电话说，活动的档期改到了这个周六。让我们尽量早晨九点之前到。那个下午我给强哥打电话说，我这里忽然有个急事，不能陪他了。强哥说没事没事，以后机会多的是。当时特别愧疚。我在心里安慰自己，都是兄弟，他可以担待的。4个月后我刷朋友圈的时候，看到了强哥晒的孩子满月照片，我才知道强哥刚办完满月酒。我越想越难受，晚上的时候给强哥打了一个电话，问他怎么没叫我。强哥说，他感觉我比较忙，处于事业上升期，应该全身心地发展事业。让我不要多心。再说又不止要这一个，下次二胎的时候叫我。强哥和我打电话的时候还是嘻嘻哈哈的，但不知道为什么我感觉我们之间的感情越来越远了。后来慢慢的有点疏远了，强哥也不给我点赞了，也很少在我们的那个小群里吹牛了。第03节因为这件事心情特别不好，周末躺在床上两天。因为我知道“都是兄弟，他一定可以担待一些的”这句话已经安慰不了我了。那时候我模糊而清晰地发觉我和强哥之间的关系有了一个难以修补的裂缝，一条不可逾越的鸿沟。星期一上班的时候我起晚了，去上班的时候路过一个初中，他们穿着蓝白相间的校服，男生们三五成群地在斑马线上走着，像极了初中时的我们。我想起了初一那年的我们。初一刚开学我和强哥一个班，当时还不是特别熟。我被几个社会上的混混勒索收保护费的时候我没给他们。结果有一天放学，7、8个混混一起在学校门口堵我，几个人把我拉到学校旁边的小树林，说要打到我听话为止。那天强哥正好路过，走到我前面，看了我一眼说：“别慌，有我呢。”转过头跟着混混说，几个兄弟，我是跟西关东哥混的，我兄弟得罪你们的话我给你赔礼道歉，今天给我个面子放我兄弟一马。说完不等混混回应就转过身来朝着我咧嘴笑，转身就要带着我走。我在那里不敢动。他说你愣着干啥，我这都摆平了，找个地方请我吃饭去吧。他话音刚落几个混混就把棍子抡到强哥身上了，边砸边喊，你是个什么东西，还给你面子。我连忙上前护住强哥。就这样我和强哥都被人揍了。被揍得鼻青脸肿。晚上的时候我和强哥在学校附近的一个烧烤摊，拿着身上仅剩的50块钱，要了一盘水煮花生，和几瓶酒。我们一人端着一瓶燕京，碰完以后，看着对方的像猪头一样的脸傻笑，然后一饮而尽。那时候我就感觉强哥会是我一辈子的兄弟。第04节那天我没去上班，我给主管发了一个请假的短信。还没等她回复我就迫不及待地买了去德州的动车票，我想去找强哥当面说清，我不想失去强哥这样一个兄弟。两点多到了德州站，我想着给强哥一个惊喜，就没打电话让他来接。出了高铁站按照强哥经常在朋友圈定位的地名打了一个出租车，上车坐了15分钟还没到。我记得上次强哥说从他家到高铁站只要5分钟。我以为是司机故意绕路宰我，我拿出手机地图输了强哥家小区的名字，屏幕上显示从高铁站到小区有28.5km。我想起了16年底12月中旬的时候，晚上9:00我从济南坐动车去北京，中间经停德州，大概停五分钟，那天我发朋友圈说自己又要去北京了。强哥在下面评论：“我们好久不见了，不然你在德州停的时候我去找你吧。反正高铁站离我家不远开车五分钟。”到了德州停车的时候，我刚出动车门就看见强哥在那里等着。那天特别冷，我穿着一个加厚版的大衣都冻的难受。强哥左手提着两盒扒鸡，右手拿着一盒烟，看见我下车就赶紧递给我，这是你以前最喜欢抽的白将军，天冷抽颗暖暖身子吧。那天一根烟刚抽了2/3，动车即将关门的广播就响了，我拿着强哥给的扒鸡上车了。现在看了地图我才知道，原来强哥说的不远是28.5km，说的开车5分钟的路程，其实要走上1小时。晚上九点多零下十几度的天气，28.5km的距离，1个多小时的车程，来换了我2/3根烟的时间。当时的心情特别复杂，既后悔又愧疚，强哥对我这么好，我却因为各种事错过他的婚礼，错过了他人生中最大的几件事。错过了他跪着拿着戒指对新娘求婚，错过了当他生命中仅此一次伴郎的机会，错过了他端起酒杯对着宾朋满座感谢他们的到来和支持的时候，错过了他为人父的举起女儿的时刻。 在车上我就哭了。我感觉特对不起强哥。司机从后视镜里看见在后座上哭的我，递给了我几张纸巾，用一种过来人的口气说，孩子，你还小，不值得为女人这么伤心。然后把音乐换成了《爱情买卖》。司机把我逗笑了。 那天晚上到了强哥的家，强哥看到我先是惊讶，后来很平静地走了过来把我的包拿过来放下，然后用力拍了拍我的肩膀说，兄弟，你来了。 晚上，我和强哥各自拿了一瓶啤酒，碰瓶，一饮而尽。像极了初一那年的那个晚上我们俩鼻青脸肿地在烧烤摊端起酒杯的时候。第05节人这一辈子大概有26298天，631152小时。在这漫长的岁月里我们会接触数万人，99.999%的人都是我们生命里的过客。真正的好兄弟，无话不谈的朋友只有很少的0.001%，然而这极其难得的0.001%，我们都极少去珍惜。因为，在我们眼里他们是我们的兄弟，无论我们做了什么，他们都不会有一点点介意。我们可以不用照顾他们的任何感受。曾经我以为是兄弟就可以肆无忌惮，嘴上说我是把你当兄弟才这样对你，才可以放你的鸽子，才可以没有任何心理负担地拒绝你。但其实他们也会介意，也会难过，也会失望。友情就像是爱情一样都需要经营，都需要付出，都需要嘘寒问暖。我们总是把自己最差最不堪的一面给了我们最亲切，漫长岁月里只遇见0.001%的人。把最好的脾气，最好的礼貌给了我们生命里的99.999%的过客。 我们总是想讨全世界的欢心，除了我们生命里最重要的那0.001%。 PS:国庆假期马上结束，无论你在哪，无论你在干什么，都希望你能给你那个重要的兄弟发个消息，打个电话，最好的话就是兄弟几个见个面撸个串喝点酒，吹吹牛逼。","categories":[{"name":"Feeling","slug":"Feeling","permalink":"http://yoursite.com/categories/Feeling/"}],"tags":[{"name":"time and tide","slug":"time-and-tide","permalink":"http://yoursite.com/tags/time-and-tide/"}]},{"title":"Hello World","slug":"Hello-World","date":"2017-10-15T12:03:04.000Z","updated":"2017-10-16T00:43:24.406Z","comments":true,"path":"2017/10/15/Hello-World/","link":"","permalink":"http://yoursite.com/2017/10/15/Hello-World/","excerpt":"This is my first blogHelle World!","text":"This is my first blogHelle World!My Name is GuoXin.","categories":[],"tags":[{"name":"tags","slug":"tags","permalink":"http://yoursite.com/tags/tags/"}]}]}